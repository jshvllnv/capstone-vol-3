const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcrypt');  // Assuming you're hashing passwords with bcrypt
const router = express.Router();
const pool = require('../db'); // Assuming you're using a pool for database connections

router.post('/login', async (req, res) => {
    const { emailOrPhone, password } = req.body;

    try {
        // Check if the user exists in the students table
        const studentQuery = 'SELECT * FROM students WHERE student_email = $1 OR student_phone_number = $1';
        const studentResult = await pool.query(studentQuery, [emailOrPhone]);

        if (studentResult.rows.length > 0) {
            // Student found
            const student = studentResult.rows[0];
            const validPassword = await bcrypt.compare(password, student.student_password); // Compare hashed password
            
            if (!validPassword) {
                return res.status(400).json({ error: 'Invalid password' });
            }

            // Create JWT for the student
            const token = jwt.sign({ id: student.student_id, role: 'student' }, process.env.JWT_SECRET, { expiresIn: '1h' });
            return res.json({ token, role: 'student' });
        }

        // Check if the user exists in the school table
        const schoolQuery = 'SELECT * FROM school WHERE school_email = $1 OR school_phone_number = $1';
        const schoolResult = await pool.query(schoolQuery, [emailOrPhone]);

        if (schoolResult.rows.length > 0) {
            // School found
            const school = schoolResult.rows[0];
            const validPassword = await bcrypt.compare(password, school.school_password);
            
            if (!validPassword) {
                return res.status(400).json({ error: 'Invalid password' });
            }

            // Create JWT for the school
            const token = jwt.sign({ id: school.school_id, role: 'school' }, process.env.JWT_SECRET, { expiresIn: '1h' });
            return res.json({ token, role: 'school' });
        }

        // If neither student nor school found
        return res.status(404).json({ error: 'User not found' });

    } catch (error) {
        console.error(error.message);
        res.status(500).send('Server error');
    }
});

module.exports = router;

// Login Route
router.post("/login", async (req, res) => {
  try {
    const { user_username, user_password } = req.body;

    //check if user is student
    const studentUser = await pool.query(
      "SELECT * FROM students WHERE student_email_address = $1 OR student_phone_number = $1;",
      [user_username]
    );

    if (studentUser.rows.length > 0) {
      // Student found, validate password
      const validPassword = await bcrypt.compare(
        user_password,
        studentUser.rows[0].student_password
      );

      if (!validPassword) {
        return res.status(401).json("Username or Password is incorrect");
      }

      // Password is valid, generate token
      const token = jwtGenerator(studentUser.rows[0].user_id);
      return res.json({ token });
    }

    //check if user is school
    const schoolUser = await pool.query(
      "SELECT * FROM schools WHERE school_email_address = $1;",
      [user_username]
    );

    if (schoolUser.rows.length > 0) {
      // School found, validate password
      const validPassword = await bcrypt.compare(
        user_password,
        schoolUser.rows[0].school_password
      );

      if (!validPassword) {
        return res.status(401).json("Username or Password is incorrect");
      }

      // Password is valid, generate token
      const token = jwtGenerator(schoolUser.rows[0].user_id);
      return res.json({ token });
    }

    // If no user is found in either students or schools
    return res.status(401).json("User does not exist");
  } catch (err) {
    console.error(err.message);
    res.status(500).send("Server Error");
  }
});
